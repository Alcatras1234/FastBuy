import { useLocation, useNavigate } from "react-router-dom";
import { useState, useEffect, useRef } from "react";
import { Box } from "@mui/material";
import UserRegisterPage from "./registration/user";
import UsersLoginPage from "./login/users";
import VerificationPage from "./verify/verifyEmail";
import OrganizerRegisterPageBaseInfo from "./registration/organizer/base_info";
import OrganizerRegisterPageCorpInfo from "./registration/organizer/corp_info";
import AdminLoginPage from "./login/admin";
import PendingPage from "./verify/verifyCorpInfo";
import { registerUser, submitOrganizerCorpInfo, checkEmailVerification, loginUser, loginAdmin } from "../../utils/axios";
import "./style.scss";

const AuthRootComponent: React.FC = (): JSX.Element => {
    const [email, setEmail] = useState<string>("");
    const [password, setPassword] = useState<string>("");
    const [confirmPassword, setConfirmPassword] = useState<string>("");
    const [errorMessage, setErrorMessage] = useState<string>("");
    const [corpName, setCorpName] = useState<string>("");
    const [phoneNumber, setPhoneNumber] = useState<string>("");
    const [isCheckingEmail, setIsCheckingEmail] = useState<boolean>(false);
    const [userRole, setUserRole] = useState<"USER" | "ORGANIZER" | null>(null);

    const emailRef = useRef<string>("");
    const location = useLocation();
    const navigate = useNavigate();

    const isValidEmail = (email: string) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    const isValidPassword = (password: string) => password.length >= 8;

    useEffect(() => {
        const storedEmail = localStorage.getItem("pendingEmail");

        if (storedEmail) {
            console.log("‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ localStorage...");
            setEmail(storedEmail);
            emailRef.current = storedEmail;
            setIsCheckingEmail(true);
        }
    }, [location.pathname]);

    useEffect(() => {
        if (location.pathname !== "/verify") return;

        const storedEmail = localStorage.getItem("pendingEmail");
        const storedRole = localStorage.getItem("userRole");

        if (!storedEmail || !storedRole) {
            console.error("üö® –ù–µ—Ç email –∏–ª–∏ —Ä–æ–ª–∏ –≤ localStorage! –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É.");
            return;
        }

        console.log("‚è≥ –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ email...");

        const interval = setInterval(async () => {
            try {
                console.log("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º email:", storedEmail);
                const response = await checkEmailVerification(storedEmail);

                if (response?.status === 200 && response.data === "email –ø—Ä–æ–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω!") {
                    console.log("‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.");

                    clearInterval(interval);
                    localStorage.removeItem("pendingEmail");
                    localStorage.removeItem("userRole");

                    setTimeout(() => {
                        navigate(storedRole === "ORGANIZER" ? "/organizer/register/corpInfo" : "/login/users");
                    }, 2000);
                }
            } catch (error) {
                console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ email:", error);
            }
        }, 10000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ email –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥

        return () => {
            console.log("üõë –û—á–∏—Å—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email.");
            clearInterval(interval);
        };
    }, [location.pathname]);

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        try {
            if (location.pathname === "/user/register" || location.pathname === "/organizer/register/baseInfo") {
                if (!email || !password || !confirmPassword) throw new Error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
                if (!isValidEmail(email)) throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email");
                if (!isValidPassword(password)) throw new Error("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤");
                if (password !== confirmPassword) throw new Error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");

                const role = location.pathname === "/user/register" ? "USER" : "ORGANIZER";

                console.log("üì© –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é:", email, password, role);
                localStorage.setItem("pendingEmail", email);
                localStorage.setItem("userRole", role);
                const response = await registerUser(email, password, role);

                if (response?.status !== 200) {
                    throw new Error("–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
                }

                console.log("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ localStorage...");
                setIsCheckingEmail(true);

                console.log("üöÄ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...");
                navigate("/verify", { state: { fromUserRegister: role === "USER", fromBaseInfo: role === "ORGANIZER" } });

            } else if (location.pathname === "/organizer/register/corpInfo") {
                if (!corpName || !phoneNumber) throw new Error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
                const storageEmail = localStorage.getItem("pendingEmail");
                if (!storageEmail) throw new Error("Email –Ω–µ –Ω–∞–π–¥–µ–Ω");

                console.log("üìú –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
                const response = await submitOrganizerCorpInfo(storageEmail, corpName, phoneNumber);
                console.log("‚úÖ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
                console.log(response);
                navigate("/pending");

            } else if (location.pathname === "/login/users" || location.pathname === "/login/admin") {
                if (!email || !password) throw new Error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");

                console.log("üîë –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞...");
                if (location.pathname === "/login/admin") {
                    const response = await loginAdmin(email, password);
                    console.log("üé© –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–æ—à–µ–ª:", response);
                } else {
                    const response = await loginUser(email, password);
                    if (response?.data === "user") {
                        navigate("/user/home");
                    } else if (response?.data === "organizer") {
                        navigate("/organizer/home");
                    } else {
                        throw new Error("–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
                    }
                }

            } else if (location.pathname === "/verify") {
                navigate(location.state?.fromBaseInfo ? "/organizer/register/corpInfo" : "/login/users");
            }
        } catch (error: any) {
            console.error("‚ùå –û—à–∏–±–∫–∞:", error.message);
            setErrorMessage(error.message || "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
        }
    };

    return (
        <div className="root">
            <div className="background-container">
                <div className="box">
                    <form className="form" onSubmit={handleSubmit}>
                        <Box
                            display="flex"
                            justifyContent="center"
                            alignItems="center"
                            flexDirection="column"
                            maxWidth={640}
                            margin="normal"
                            padding={5}
                            borderRadius={5}
                            boxShadow={"5px 5px 10px #ccc"}
                        >
                            {errorMessage && <p style={{ color: "red", marginBottom: "10px" }}>{errorMessage}</p>}

                            {location.pathname === "/user/register" ? (
                                <UserRegisterPage setEmail={setEmail} setPassword={setPassword} setConfirmPassword={setConfirmPassword} />
                            ) : location.pathname === "/organizer/register/baseInfo" ? (
                                <OrganizerRegisterPageBaseInfo setEmail={setEmail} setPassword={setPassword} setConfirmPassword={setConfirmPassword} />
                            ) : location.pathname === "/organizer/register/corpInfo" ? (
                                <OrganizerRegisterPageCorpInfo setPhoneNumber={setPhoneNumber} setCorpName={setCorpName} />
                            ) : location.pathname === "/login/users" ? (
                                <UsersLoginPage setEmail={setEmail} setPassword={setPassword} />
                            ) : location.pathname === "/login/admin" ? (
                                <AdminLoginPage setEmail={setEmail} setPassword={setPassword} />
                            ) : location.pathname === "/verify" ? (
                                <VerificationPage />
                            ) : location.pathname === "/pending" ? (
                                <PendingPage/>
                            ): null}
                        </Box>
                    </form>
                </div>
            </div>
        </div>
    );
};

export default AuthRootComponent;