import axios from "axios";
import Cookies from "js-cookie";

// Create an axios instance with default configurations
export const instance = axios.create({
    baseURL: "http://localhost:8081", // Use your backend API URL
    timeout: 10000,
    headers: { 'X-Custom-Header': 'foobar' }
});

// ‚úÖ –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –∏ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º `accessToken`
instance.interceptors.request.use(config => {
    const token = Cookies.get("acccessToken");
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
});

// ‚úÖ –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º accessToken, –µ—Å–ª–∏ –æ–Ω –∏—Å—Ç–µ–∫
instance.interceptors.response.use(
    (response) => response,
    async (error) => {
        const originalRequest = error.config;

        // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ 401 Unauthorized –∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –ø–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞
        if (error.response?.status === 401 && !originalRequest._retry) {
            originalRequest._retry = true;

            const refreshToken = Cookies.get("refreshToken");
            if (!refreshToken) {
                console.log("‚õî –ù–µ—Ç refreshToken, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.");
                Cookies.remove("accessToken");
                Cookies.remove("refreshToken");
                return Promise.reject(error);
            }

            try {
                console.log("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è `accessToken`...");
                const response = await axios.post("http://localhost:8081/api/auth_service/refresh", {
                    refreshToken,
                });

                const newAccessToken = response.data.accessToken;
                console.log("‚úÖ –ù–æ–≤—ã–π accessToken –ø–æ–ª—É—á–µ–Ω:", newAccessToken);
                
                Cookies.set("accessToken", newAccessToken, { expires: 7 });

                // ‚ùó –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º
                originalRequest.headers.Authorization = `Bearer ${newAccessToken}`;
                return instance(originalRequest);
            } catch (refreshError) {
                console.error("‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:", refreshError);
                Cookies.remove("accessToken");
                Cookies.remove("refreshToken");
                return Promise.reject(refreshError);
            }
        }

        return Promise.reject(error);
    }
);



// Register user
// –¢–£–¢ –Ø –ú–ï–ù–Ø–õ, –î–û–ë–ê–í–ò–õ –í –ü–ê–†–ê–ú–ï–¢–†–ê–• –†–û–õ–¨
export const registerUser = async (email: string, password: string, role: string) => {
    try {
        console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
        const response = await instance.post('/api/auth_service/registration', { email, password, role});
        console.log("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", { email, password });
        console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
        return response;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);

        if (error.response) {
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400 –∏–ª–∏ 500)
            if (error.response.status === 400) {
                throw new Error("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
            } else {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.response.data?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
            }
        } else if (error.request) {
            // –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω)
            throw new Error("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } else {
            // –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥)
            throw new Error(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
    }
};

// Login user
export const loginUser = async (email: string, password: string) => {
    try {
        console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:", email, password);

        const response = await instance.post('/api/auth_service/auth', { email, password });
        //console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ (–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è):", response.data);

        const { accessToken, refreshToken, role, email: serverEmail} = response.data;
        if (!accessToken || !refreshToken) {
            console.error("‚õî –°–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª —Ç–æ–∫–µ–Ω—ã!", response.data);
            throw new Error("–û—à–∏–±–∫–∞: —Å–µ—Ä–≤–µ—Ä –Ω–µ –≤–µ—Ä–Ω—É–ª `accessToken` –∏–ª–∏ `refreshToken`");
        }

        console.log("üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ Cookies...");
        Cookies.set("accessToken", accessToken, { expires: 7 }); // 7 –¥–Ω–µ–π (–≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã)
        Cookies.set("refreshToken", refreshToken, { expires: 30 }); // 30 –¥–Ω–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è

       // ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º email, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
        Cookies.set("Email", email, { expires: 7 });
        console.log("‚úÖ –¢–æ–∫–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!");

        return response;// Assuming tokens are returned
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    }
};


export const loginAdmin = async (email: string, password: string) => {
    try {
        const response = await instance.post('/api/auth_service/auth/admin', { email, password});
        return response.data; // Assuming tokens are returned
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    }
};

// Register organizer
// –¢–£–¢ –Ø –¢–û–ñ–ï –ò–ó–ú–ï–ù–ò–õ –ü–ê–†–ê–ú–ï–¢–†–´, –î–û–ë–ê–í–ò–í –†–û–õ–¨, –ï–ï –ù–ê–î–û –û–¢–ü–ê–†–í–õ–Ø–¢–¨

export const submitOrganizerCorpInfo = async ( email: string, companyName: string, contactNumber: string) => {
    try {
        console.log("Starting")
        console.log("üì® –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", { email, companyName, contactNumber});
        const response = await instance.post('/api/organizer_service/organizator', { email, companyName, contactNumber});
        console.log("vse ok")
        return response;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error.response?.data || error.message);
        throw new Error(error.response?.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤

export const fetchPendingOrganizers = async (page: number, count: number) => {
    try {
        const response = await instance.get("/api/organizer_service/organizator/data/unprroved", { page, count});
        const data = response.data;
        console.log(data)

        if (!Array.isArray(data)) {
            throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        }

        return data.map((item) => ({
            email: item.user?.email || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            corpName: item.companyName || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            phoneNumber: item.contactNumber || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        }));
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫:", error);
        return [];
    }
};

export const fetchApprovedOrganizers = async (page: number, count: number) => {
    try {
        const response = await instance.get("/api/organizer_service/organizator/data/approved", { page, count});
        const data = response.data;
        console.log(data)

        if (!Array.isArray(data)) {
            throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        }

        return data.map((item) => ({
            email: item.user?.email || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            corpName: item.companyName || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            phoneNumber: item.contactNumber || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        }));
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫:", error);
        return [];
    }
};

/*export const fetchRejectedOrganizers = async (page: number, count: number) => {
    try {
        const response = await instance.get("/auth/auth_service/organizator/data/unprroved", { page, count});
        const data = response.data;
        console.log(data)

        if (!Array.isArray(data)) {
            throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        }

        return data.map((item) => ({
            email: item.user?.email || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            corpName: item.companyName || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            phoneNumber: item.contactNumber || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        }));
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫:", error);
        return [];
    }
};*/

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
export const approveOrganizer = async (email: string) => {
    try {
        console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–∞–∏–ª–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ", email);
        const response = await instance.patch('/api/organizer_service/organizator/data/approve', { email });
        console.log("‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–µ–Ω:", email);
        return response
    } catch (error) {
        console.log(error.message);
        throw new Error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞");
    }
};

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
export const rejectOrganizer = async (email: string) => {
    try {
        console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–∞–∏–ª–∞ –Ω–∞ –æ—Ç–∫–∞–∑", email);
        const response = await instance.patch('/api/organizer_service/organizator/data/unpprove', {email});
        console.log("‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω:", email);
        return response;
    } catch (error) {
        console.log(error.response?.data);
        console.log(error.message);
        throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞");
    }
};

export const checkEmailVerification = async (email: string) => {
    try {
        console.log(`üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É email: ${email}`);
        const response = await instance.get(`/api/auth_service/email?email=${email}`);
        console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status);
        return response;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email:", error);
        throw new Error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
    }
};

// –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–æ–∑–¥–∞–Ω–æ–º –º–∞—Ç—á–µ
export const createMatch = async (matchData) => {
    try {
        const token = Cookies.get("accessToken"); 
        if (!token) throw new Error("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥");

        const requestBody = { token, ...matchData };

        console.log("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞:", requestBody);

        const response = await instance.post("/api/organizer_service/match", requestBody);
        
        console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data);
        
        return response.data;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞:", error.response?.data || error.message);
        throw new Error(error.response?.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞");
    }
};


// –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö
export const fetchOrganizerMatches = async (page = 0, count = 10) => {
    try {
        const token = Cookies.get("accessToken");
        if (!token) throw new Error("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.");
        
        console.log("üì° –ó–∞–≥—Ä—É–∂–∞–µ–º –º–∞—Ç—á–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞...", { page, count });

        const response = await instance.get("/api/organizer_service/match/data", { 
            params: { token, page, count } // –î–æ–±–∞–≤–∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        });

        console.log("‚úÖ –î–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π:", response.data);
        return response.data;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π:", error.response?.data || error.message);
        throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç—á–µ–π.");
    }
};

// –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–µ
export const updateMatch = async (matchId: string, updatedData: any) => {
    try {
        const response = await instance.put(`/api/match_service/matches/${matchId}`, updatedData);
        return response.data;
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞");
    }
};

// —É–¥–∞–ª–∏—Ç—å –º–∞—Ç—á
export const deleteMatch = async (matchId: string) => {
    try {
        await instance.delete(`/api/match_service/matches/${matchId}`);
        console.log(`–ú–∞—Ç—á ${matchId} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω`);
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç—á–∞");
    }
};


//const hardcodedToken = "eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiI1IiwiZW1haWwiOiJka2ltLnNwYkBnbWFpbC5jb20iLCJyb2xlIjoiT1JHQU5JWkVSIiwiaWF0IjoxNzQwNjYzNDgyLCJleHAiOjE3NDA2NjcwODJ9.fI2WQJqDlmyecVCkDjRNV8mM6KJt3KKS7nB-IHXJDK4";
export const fetchOrganizerProfile = async () => {
    try {
        const token = Cookies.get("accessToken"); // ‚úÖ –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Cookies
        if (!token) throw new Error("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.");

        // ‚úÖ Add token inside the URL as a query parameter
        const response = await instance.get(`/api/organizer_service/profile?token=${token}`);

        return response.data; // ‚úÖ Return the backend response
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:", error);
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.");
    }
};


export const updateOrganizerProfile = async (updatedData) => {
    try {
        const token = Cookies.get("accessToken"); // ‚úÖ –¢–µ–ø–µ—Ä—å –±–µ—Ä–µ–º —Ç–æ–∫–µ–Ω –∏–∑ Cookies
        if (!token) throw new Error("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.");

        // ‚úÖ Extract only the required fields
        const { companyName, contactPhone, bankAccount } = updatedData;

        const requestData = {
            token: token,
            companyName,
            contactPhone,
            bankAccount,
        };

        //console.log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:", requestData); // ‚úÖ Debugging output for request data

        // ‚úÖ Send PUT request with the filtered JSON body
        const response = await instance.put("/api/organizer_service/profile/data", requestData);

        //console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data); // ‚úÖ Debugging: Log backend response
        return response.data;
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞:", error.response || error);
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.");
    }
};

export const fetchUsersMatches = async (page: number, count: number) => {
    try {
        const token = Cookies.get("token");
        if (!token) throw new Error("–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥.");
        const response = await instance.get("/api/organizer_service/match/data", {
            params: { page, count },
            headers: { Authorization: `Bearer ${token}` }});
        const data = response.data;

        if (!Array.isArray(data)) {
            throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        }

        return data.map((item) => ({
            id: item.id || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            league: item.league || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            scheduleDate: item.scheduleDate || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            scheduleTimeLocal: item.scheduleTimeLocal || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            stadiumName: item.stadiumName || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            ticketsCount: item.ticketsCount || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            ticketsPrice: item.ticketsPrice || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            info: item.info || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            teamHomeName: item.teamHomeName || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            teamAwayName: item.teamAwayName || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            photoUrl: item.photoUrl || "",
            /*organizer: item.organizer?.name ? `${item.organizer.name} ${item.organizer.surname}` : "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",*/
            status: item.status || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            createdDateTime: item.createdDateTime || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            updatedDateTime: item.updatedDateTime || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        }));

    } catch (error) {
        throw new Error(error.message);
    }
}