import axios from "axios";
import {useNavigate} from "react-router-dom";

// Create an axios instance with default configurations
export const instance = axios.create({
    baseURL: "http://45.145.4.240:8080", // Use your backend API URL
    timeout: 10000,
    headers: { 'X-Custom-Header': 'foobar' }
});

// Register user
// –¢–£–¢ –Ø –ú–ï–ù–Ø–õ, –î–û–ë–ê–í–ò–õ –í –ü–ê–†–ê–ú–ï–¢–†–ê–• –†–û–õ–¨
export const registerUser = async (email: string, password: string, role: string) => {
    try {
        console.log("–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è")
        const response = await instance.post('/api/auth_service/registration', { email, password, role});
        console.log("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", { email, password });
        console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response);
        return response;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", error);

        if (error.response) {
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—Ç–∏–ª —Å –æ—à–∏–±–∫–æ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400 –∏–ª–∏ 500)
            if (error.response.status === 400) {
                throw new Error("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã");
            } else {
                throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.response.data?.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
            }
        } else if (error.request) {
            // –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–µ—Ä–≤–µ—Ä –≤—ã–∫–ª—é—á–µ–Ω)
            throw new Error("–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        } else {
            // –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥)
            throw new Error(`–û—à–∏–±–∫–∞: ${error.message}`);
        }
    }
};

// Login user
export const loginUser = async (email: string, password: string) => {
    try {
        const response = await instance.post('/api/auth_service/auth', { email, password });
        return response.data; // Assuming tokens are returned
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    }
};

export const loginAdmin = async (email: string, password: string) => {
    try {
        const response = await instance.post('/api/auth_service/auth/admin', { email, password});
        return response.data; // Assuming tokens are returned
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    }
};

// Register organizer
// –¢–£–¢ –Ø –¢–û–ñ–ï –ò–ó–ú–ï–ù–ò–õ –ü–ê–†–ê–ú–ï–¢–†–´, –î–û–ë–ê–í–ò–í –†–û–õ–¨, –ï–ï –ù–ê–î–û –û–¢–ü–ê–†–í–õ–Ø–¢–¨

export const submitOrganizerCorpInfo = async ( email: string, companyName: string, contactNumber: string) => {
    try {
        console.log("Starting")
        console.log("üì® –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", { email, companyName, contactNumber});
        const response = await instance.post('/api/organizer_service/organizator', { email, companyName, contactNumber});
        console.log("vse ok")
        return response;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:", error.response?.data || error.message);
        throw new Error(error.response?.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤

export const fetchPendingOrganizers = async (page: number, count: number) => {
    try {
        const response = await instance.get("/api/organizer_service/organizator/data/unprroved", { page, count});
        const data = response.data;
        console.log(data)

        if (!Array.isArray(data)) {
            throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        }

        return data.map((item) => ({
            email: item.user?.email || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            corpName: item.companyName || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            phoneNumber: item.contactNumber || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        }));
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫:", error);
        return [];
    }
};

export const fetchApprovedOrganizers = async (page: number, count: number) => {
    try {
        const response = await instance.get("/api/organizer_service/organizator/data/approved", { page, count});
        const data = response.data;
        console.log(data)

        if (!Array.isArray(data)) {
            throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        }

        return data.map((item) => ({
            email: item.user?.email || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            corpName: item.companyName || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            phoneNumber: item.contactNumber || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        }));
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫:", error);
        return [];
    }
};

/*export const fetchRejectedOrganizers = async (page: number, count: number) => {
    try {
        const response = await instance.get("/auth/auth_service/organizator/data/unprroved", { page, count});
        const data = response.data;
        console.log(data)

        if (!Array.isArray(data)) {
            throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞");
        }

        return data.map((item) => ({
            email: item.user?.email || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            corpName: item.companyName || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
            phoneNumber: item.contactNumber || "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö",
        }));
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫:", error);
        return [];
    }
};*/

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
export const approveOrganizer = async (email: string) => {
    try {
        console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–∞–∏–ª–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ", email);
        const response = await instance.patch('/api/organizer_service/organizator/data/approve', { email });
        console.log("‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–µ–Ω:", email);
        return response
    } catch (error) {
        console.log(error.message);
        throw new Error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞");
    }
};

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
export const rejectOrganizer = async (email: string) => {
    try {
        console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —ç–º–∞–∏–ª–∞ –Ω–∞ –æ—Ç–∫–∞–∑", email);
        const response = await instance.patch('/api/organizer_service/organizator/data/unpprove', {email});
        console.log("‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω:", email);
        return response;
    } catch (error) {
        console.log(error.response?.data);
        console.log(error.message);
        throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞");
    }
};

export const checkEmailVerification = async (email: string) => {
    try {
        console.log(`üîç –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É email: ${email}`);
        const response = await instance.get(`/api/auth_service/email?email=${email}`);
        console.log("‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status);
        return response;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ email:", error);
        throw new Error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
    }
};