import axios from "axios";

// Create an axios instance with default configurations
export const instance = axios.create({
    baseURL: "http://45.145.4.240:8080", // Use your backend API URL
    timeout: 1000,
    headers: { 'X-Custom-Header': 'foobar' }
});

// Register user
// –¢–£–¢ –Ø –ú–ï–ù–Ø–õ, –î–û–ë–ê–í–ò–õ –í –ü–ê–†–ê–ú–ï–¢–†–ê–• –†–û–õ–¨
export const registerUser = async (email: string, password: string, role: string) => {
    try {
        const response = await instance.post('/api/auth_service/registration', { email, password, role});
        console.log("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", { email, password });
        console.log("–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.data);
        return response.data;
    } catch (error) {
        if(error.response.status === 400){
            throw new Error("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        }else {
            throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
    }
};

// Verify email
export const verifyEmailCode = async (verificationCode: string) => {
    try {
        const response = await instance.post('/api/auth_service/registration', { code: verificationCode });
        return response.data;
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏");
    }
};

// Login user
export const loginUser = async (email: string, password: string) => {
    try {
        const response = await instance.post('/api/auth_service/auth', { email, password });
        return response.data; // Assuming tokens are returned
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏");
    }
};

// Register organizer
// –¢–£–¢ –Ø –¢–û–ñ–ï –ò–ó–ú–ï–ù–ò–õ –ü–ê–†–ê–ú–ï–¢–†–´, –î–û–ë–ê–í–ò–í –†–û–õ–¨, –ï–ï –ù–ê–î–û –û–¢–ü–ê–†–í–õ–Ø–¢–¨
export const registerOrganizer = async (email: string, password: string, role: string) => {
    try {
        const response = await instance.post('/api/auth_service/registration', { email, password, role });
        return response.data;
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞");
    }
};

export const submitOrganizerCorpInfo = async (corpName: string, phoneNumber: string, email: string) => {
    try {
        const response = await instance.post('/api/organizer_service/register', { corpName, phoneNumber, email });
        console.log("üì® –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:", { corpName, phoneNumber, email });
        return response.data;
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
    }
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞—è–≤–æ–∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
export const fetchPendingOrganizers = async () => {
    try {
        const response = await instance.get('/api/admin_service/pending_organizers');
        return response.data;
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞—è–≤–æ–∫");
    }
};

// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
export const approveOrganizer = async (organizerId: string) => {
    try {
        await instance.post('/api/admin_service/approve_organizer', { organizerId });
        console.log("‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ–¥–æ–±—Ä–µ–Ω:", organizerId);
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞");
    }
};

// –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
export const rejectOrganizer = async (organizerId: string) => {
    try {
        await instance.post('/api/admin_service/reject_organizer', { organizerId });
        console.log("‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω:", organizerId);
    } catch (error) {
        throw new Error("–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞");
    }
};

export const checkEmailVerification = async (email: string) => {
    try {
        const response = await instance.get(`/api/auth_service/email?email=${email}`);
        return response.data;
    }catch (error){
        throw new Error("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏");
    }
}