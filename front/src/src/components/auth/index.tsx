import { useLocation, useNavigate } from "react-router-dom";
import { useState, useEffect, useRef } from "react";
import { Box } from "@mui/material";
import UserRegisterPage from "./registration/user";
import UsersLoginPage from "./login/users";
import VerificationPage from "./verify";
import OrganizerRegisterPageBaseInfo from "./registration/organizer/base_info";
import OrganizerRegisterPageCorpInfo from "./registration/organizer/corp_info";
import AdminLoginPage from "./login/admin";
import { registerUser, submitOrganizerCorpInfo } from "../../utils/axios";
import * as SockJS from "sockjs-client";
import { Client } from "@stomp/stompjs";
import "./style.scss";

const AuthRootComponent: React.FC = (): JSX.Element => {
    const [email, setEmail] = useState("");
    const [password, setPassword] = useState("");
    const [confirmPassword, setConfirmPassword] = useState("");
    const [errorMessage, setErrorMessage] = useState("");
    const [corpName, setCorpName] = useState("");
    const [phoneNumber, setPhoneNumber] = useState("");
    const [userUUID, setUserUUID] = useState<string | null>(null);
    const [message, setMessage] = useState<string | null>(null);

    const location = useLocation();
    const navigate = useNavigate();
    const stompClientRef = useRef<Client | null>(null);

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ email
    const isValidEmail = (email: string) => {
        return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
    };

    // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
    const isValidPassword = (password: string) => {
        return password.length >= 8;
    };

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket
    const connect = (uuid: string) => {
        if (stompClientRef.current) return;

        const socket = new SockJS("http://45.145.4.240:8080/ws");
        const stompClient = new Client({
            webSocketFactory: () => socket,
            reconnectDelay: 5000,

            onConnect: (frame) => {
                console.log("‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω:", frame);
                stompClient.subscribe(`/topic/message/${uuid}`, (response) => {
                    const receivedMessage = JSON.parse(response.body);
                    setMessage(receivedMessage);
                });
            },

            onStompError: (frame) => {
                console.error("‚ùå –û—à–∏–±–∫–∞ STOMP:", frame);
            },
        });

        stompClient.activate();
        stompClientRef.current = stompClient;
    };

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();

        try {
            if (location.pathname === "/user/register" || location.pathname === "/organizer/register/baseInfo") {
                if (!email || !password || !confirmPassword) throw new Error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
                if (!isValidEmail(email)) throw new Error("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email");
                if (!isValidPassword(password)) throw new Error("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤");
                if (password !== confirmPassword) throw new Error("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç");

                if (location.pathname === "/user/register") {
                    const response = await registerUser(email, password, "USER");
                    const userUUID = response.body;
                    setUserUUID(userUUID);
                    connect(userUUID);
                    navigate("/verify", { state: { fromUserRegister: true } });
                } else {
                    const response = await registerUser(email, password, "ORGANIZER");
                    const userUUID = response.body;
                    setUserUUID(userUUID);
                    connect(userUUID);
                    navigate("/verify", { state: { fromBaseInfo: true } });
                }

            } else if (location.pathname === "/organizer/register/corpInfo") {
                if (!corpName || !phoneNumber) throw new Error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");

                try {
                    await submitOrganizerCorpInfo(corpName, phoneNumber, email);
                    console.log("‚úÖ –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã");
                    navigate("/organizer/pending"); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–∂–∏–¥–∞–Ω–∏—è
                } catch (error: any) {
                    setErrorMessage(error.message || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
                }

            } else if (location.pathname === "/login/users" || location.pathname === "/login/admin") {
                if (!email || !password) throw new Error("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è");
                navigate("/user/home");

            } else if (location.pathname === "/verify") {
                    if (location.state?.fromBaseInfo) navigate("/organizer/register/corpInfo");
                    else navigate("/login/users");
            }
        } catch (error: any) {
            setErrorMessage(error.message || "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö");
        }
    };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º WebSocket-—Å–æ–æ–±—â–µ–Ω–∏–µ
    useEffect(() => {
        if (message === "true") {
            console.log("‚úÖ Email –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞...");
            navigate("/login/users");
        }
    }, [message, navigate]);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º WebSocket –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ UUID
    useEffect(() => {
        if (userUUID) {
            connect(userUUID);
        }
    }, [userUUID]);

    return (
        <div className="root">
            <div className="background-container">
                <div className="box">
                    <form className="form" onSubmit={handleSubmit}>
                        <Box
                            display="flex"
                            justifyContent="center"
                            alignItems="center"
                            flexDirection="column"
                            maxWidth={640}
                            margin="normal"
                            padding={5}
                            borderRadius={5}
                            boxShadow={"5px 5px 10px #ccc"}
                        >
                            {errorMessage && <p style={{ color: "red", marginBottom: "10px" }}>{errorMessage}</p>}

                            {location.pathname === "/user/register" ? (
                                <UserRegisterPage setEmail={setEmail} setPassword={setPassword} setConfirmPassword={setConfirmPassword} />
                            ) : location.pathname === "/organizer/register/baseInfo" ? (
                                <OrganizerRegisterPageBaseInfo setEmail={setEmail} setPassword={setPassword} setConfirmPassword={setConfirmPassword} />
                            ) : location.pathname === "/organizer/register/corpInfo" ? (
                                <OrganizerRegisterPageCorpInfo setPhoneNumber={setPhoneNumber} setCorpName={setCorpName} />
                            ) : location.pathname === "/login/users" ? (
                                <UsersLoginPage setEmail={setEmail} setPassword={setPassword} />
                            ) : location.pathname === "/login/admin" ? (
                                <AdminLoginPage setEmail={setEmail} setPassword={setPassword} />
                            ) : location.pathname === "/verify" ? (
                                <VerificationPage  />
                            ) : location.pathname === "/verify-email" ? (
                                <h2>üì© –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ email! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É.</h2>
                            ) : null}
                        </Box>
                    </form>
                </div>
            </div>
        </div>
    );
};

export default AuthRootComponent;